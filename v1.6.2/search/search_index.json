{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\ud83d\udd11 Authentication Library for React Js for Token Based Auth with Json Web Token(JWT) \ud83d\udd11 React Auth Kit is a lightweight auth management library for React JS. It is production-ready, and gives you the following: \ud83d\udce6 Very lightweight \u269b\ufe0fBuild for React Js \ud83d\ude80 Fast and easy to Implement \ud83d\udee1\ufe0f Supports Json Web Token (JWT) \ud83d\udd12 Secure Client Side Authentication \u2328\ufe0fHighly typed and written in TypeScript \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Introduction"},{"location":"authdata/","text":"Auth User Data \u00b6 Get the Authorized user's state from any Component simply by using HOC or Hooks To get the Authorized user's state from Higher Order Components , use withAuthUser To get the Authorized user's state using React Hooks , use useAuthUser Using Hooks \u00b6 import { useAuthUser } from 'react-auth-kit' Demo \u00b6 import React from 'react' import {useAuthUser} from 'react-auth-kit' const SomeComponent = () => { const auth = useAuthUser() return( <div> Hello {auth().user} </div> ) } Using Higher Order Component \u00b6 import {withAuthUser} from 'react-auth-kit' Demo \u00b6 import React from 'react' import {withAuthUser} from 'react-auth-kit' class SomeComponent extends React.Component { render(){ return ( <div> Hello {this.props.authState.user} </div> ) } } export default withAuthUser(SomeComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Auth User Data"},{"location":"authdata/#auth-user-data","text":"Get the Authorized user's state from any Component simply by using HOC or Hooks To get the Authorized user's state from Higher Order Components , use withAuthUser To get the Authorized user's state using React Hooks , use useAuthUser","title":"Auth User Data"},{"location":"authdata/#using-hooks","text":"import { useAuthUser } from 'react-auth-kit'","title":"Using Hooks"},{"location":"authdata/#demo","text":"import React from 'react' import {useAuthUser} from 'react-auth-kit' const SomeComponent = () => { const auth = useAuthUser() return( <div> Hello {auth().user} </div> ) }","title":"Demo"},{"location":"authdata/#using-higher-order-component","text":"import {withAuthUser} from 'react-auth-kit'","title":"Using Higher Order Component"},{"location":"authdata/#demo_1","text":"import React from 'react' import {withAuthUser} from 'react-auth-kit' class SomeComponent extends React.Component { render(){ return ( <div> Hello {this.props.authState.user} </div> ) } } export default withAuthUser(SomeComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Demo"},{"location":"authheader/","text":"Auth Header \u00b6 Get the Auth Header for future request from any Component simply by using HOC or Hooks To get the Auth Header from Higher Order Components , use withAuthHeader To get the Auth Header using React Hooks , use useAuthHeader Using Hooks \u00b6 import { useAuthHeader } from 'react-auth-kit' Demo \u00b6 import React from 'react' import {useAuthHeader} from 'react-auth-kit' const SomeComponent = () => { const authHeader = useAuthHeader() return( <div> {authHeader} </div> ) } Using Higher Order Component \u00b6 import {withAuthHeader} from 'react-auth-kit' Demo \u00b6 import React from 'react' import {withAuthHeader} from 'react-auth-kit' class SomeComponent extends React.Component { render(){ return ( <div> {this.props.authHeader} </div> ) } } export default withAuthHeader(SomeComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Auth Header"},{"location":"authheader/#auth-header","text":"Get the Auth Header for future request from any Component simply by using HOC or Hooks To get the Auth Header from Higher Order Components , use withAuthHeader To get the Auth Header using React Hooks , use useAuthHeader","title":"Auth Header"},{"location":"authheader/#using-hooks","text":"import { useAuthHeader } from 'react-auth-kit'","title":"Using Hooks"},{"location":"authheader/#demo","text":"import React from 'react' import {useAuthHeader} from 'react-auth-kit' const SomeComponent = () => { const authHeader = useAuthHeader() return( <div> {authHeader} </div> ) }","title":"Demo"},{"location":"authheader/#using-higher-order-component","text":"import {withAuthHeader} from 'react-auth-kit'","title":"Using Higher Order Component"},{"location":"authheader/#demo_1","text":"import React from 'react' import {withAuthHeader} from 'react-auth-kit' class SomeComponent extends React.Component { render(){ return ( <div> {this.props.authHeader} </div> ) } } export default withAuthHeader(SomeComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Demo"},{"location":"checkauth/","text":"Check Authentication \u00b6 Check if any user is authenticated or not Introduction \u00b6 There are many times, when you have to understand if any user is authenticated (especially in login pages, where you have to redirect your user to its dashboard or allow to login) For this reason, React Auth Kit comes with isAuth functions IsAuth functionality available in both hook and Higher Order Component For Functional Components, you can use useIsAuthenticated function inside any components For class based components, you can wrap the component inside withIsAuthenticated function Usage \u00b6 Functional Component \u00b6 Check the authentication status in React Functional Components(FC) by adding the useIsAuthenticated hook inside it. Import \u00b6 import {useIsAuthenticated} from 'react-auth-kit'; Demo \u00b6 import {useIsAuthenticated} from 'react-auth-kit'; const AnyComponent = () => { const isAuthenticated = useIsAuthenticated() if(isAuthenticated()){ // Redirect to Dashboard } else { // Redirect to Login } } API \u00b6 useIsAuthenticated() Returns () => boolean Class Based Component \u00b6 Import \u00b6 import { withIsAuthenticated } from 'react-auth-kit' ; Demo \u00b6 import React from \"react\" ; import { withIsAuthenticated } from 'react-auth-kit' ; class SomeComponent extends React . Component { render (){ if ( this . props . isAuthenticated ()){ // Redirect to Dashboard } else { // Redirect to Login } } } export default withIsAuthenticated ( SomeComponent ) API \u00b6 withIsAuthenticated < P > ( Component : React.ComponentType < P > ) : React . FC < P > Parameters Component: React . ComponentType < P > Returns React . FC < P > (Functional Component with isAuthenticated() prop) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Check Authentication"},{"location":"checkauth/#check-authentication","text":"Check if any user is authenticated or not","title":"Check Authentication"},{"location":"checkauth/#introduction","text":"There are many times, when you have to understand if any user is authenticated (especially in login pages, where you have to redirect your user to its dashboard or allow to login) For this reason, React Auth Kit comes with isAuth functions IsAuth functionality available in both hook and Higher Order Component For Functional Components, you can use useIsAuthenticated function inside any components For class based components, you can wrap the component inside withIsAuthenticated function","title":"Introduction"},{"location":"checkauth/#usage","text":"","title":"Usage"},{"location":"checkauth/#functional-component","text":"Check the authentication status in React Functional Components(FC) by adding the useIsAuthenticated hook inside it.","title":"Functional Component"},{"location":"checkauth/#import","text":"import {useIsAuthenticated} from 'react-auth-kit';","title":"Import"},{"location":"checkauth/#demo","text":"import {useIsAuthenticated} from 'react-auth-kit'; const AnyComponent = () => { const isAuthenticated = useIsAuthenticated() if(isAuthenticated()){ // Redirect to Dashboard } else { // Redirect to Login } }","title":"Demo"},{"location":"checkauth/#api","text":"useIsAuthenticated() Returns () => boolean","title":"API"},{"location":"checkauth/#class-based-component","text":"","title":"Class Based Component"},{"location":"checkauth/#import_1","text":"import { withIsAuthenticated } from 'react-auth-kit' ;","title":"Import"},{"location":"checkauth/#demo_1","text":"import React from \"react\" ; import { withIsAuthenticated } from 'react-auth-kit' ; class SomeComponent extends React . Component { render (){ if ( this . props . isAuthenticated ()){ // Redirect to Dashboard } else { // Redirect to Login } } } export default withIsAuthenticated ( SomeComponent )","title":"Demo"},{"location":"checkauth/#api_1","text":"withIsAuthenticated < P > ( Component : React.ComponentType < P > ) : React . FC < P > Parameters Component: React . ComponentType < P > Returns React . FC < P > (Functional Component with isAuthenticated() prop) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"API"},{"location":"contributing/","text":"Contributing \u00b6 Notice something that needs fixing? Or something that could be improved? Awesome! Here are some guidelines below that'll help you to do just that. In general, there are two main types of contribution, General improvements: Typo corrections. Fixing broken refs and links. Correcting inaccurate or out of date info. Offering better explanations through clear writings and examples. New Pages or features Adding a page of documentation that we haven't covered yet. Documenting a new feature that had been added to this project since its last release. Before contributing \u00b6 Read the CONTRIBUTING.md first if you haven't yet. Familiarize yourself with Mkdocs and Material for MkDocs with which we created the documentation. Read through some of our existing documents and get a feel about the overall structure and style. Read our 'Best practices' section and please ensure your PR meets those. Steps for local setup \u00b6 We use Github Flow , all code changes happen through Pull Requests . Follow the steps specified at CONTRIBUTING.md to set up a local repo of the project. Install Material for MkDocs. Pip pip install mkdocs-material This will automatically install compatible versions of all dependencies: MkDocs , Markdown , Pygments and Python Markdown Extensions . Docker The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-materiall The mkdocs executable is provided as an entry point and serve is the default command. Git Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material. When cloning from git, you must install all required dependencies yourself: pip install -r mkdocs-material/requirements.txt All the contents are in the docs folder and the mkdocs config in mkdocs.yml relative to the project root directory. MkDocs includes a live preview server, so you can preview your changes as you modify the documentation. The server will automatically rebuild the site upon saving. Start it with: mkdocs serve You are now all set up and ready to contribute! Best practices \u00b6 All pages must include a proper title and an introduction. If the document contains a technical term, it must be highlighted using *term* markdown syntax. If the document contains an acronym or initialism, it should be first introduced highlighted in its expanded form followed by the commonly-accepted abbreviation in brackets (like Free and open-source software (FOSS)). Use paragraphs to introduce a single concept and move on to a new paragraph before introducing another or expanding upon the first concept. Keep the size of those paragraphs to no more than four to five lines. If you find you're putting commas in a sentence consider splitting it into two or more sentences for improved clarity. Split the document up into as many sub-sections as makes sense. This is especially helpful for the readers who want to skip ahead for reference, as we can also use subheads as navigational anchors. \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Contributing"},{"location":"contributing/#contributing","text":"Notice something that needs fixing? Or something that could be improved? Awesome! Here are some guidelines below that'll help you to do just that. In general, there are two main types of contribution, General improvements: Typo corrections. Fixing broken refs and links. Correcting inaccurate or out of date info. Offering better explanations through clear writings and examples. New Pages or features Adding a page of documentation that we haven't covered yet. Documenting a new feature that had been added to this project since its last release.","title":"Contributing"},{"location":"contributing/#before-contributing","text":"Read the CONTRIBUTING.md first if you haven't yet. Familiarize yourself with Mkdocs and Material for MkDocs with which we created the documentation. Read through some of our existing documents and get a feel about the overall structure and style. Read our 'Best practices' section and please ensure your PR meets those.","title":"Before contributing"},{"location":"contributing/#steps-for-local-setup","text":"We use Github Flow , all code changes happen through Pull Requests . Follow the steps specified at CONTRIBUTING.md to set up a local repo of the project. Install Material for MkDocs. Pip pip install mkdocs-material This will automatically install compatible versions of all dependencies: MkDocs , Markdown , Pygments and Python Markdown Extensions . Docker The official Docker image is a great way to get up and running in a few minutes, as it comes with all dependencies pre-installed. Pull the image for the latest version with: docker pull squidfunk/mkdocs-materiall The mkdocs executable is provided as an entry point and serve is the default command. Git Material for MkDocs can be directly used from GitHub by cloning the repository into a subfolder of your project root which might be useful if you want to use the very latest version: git clone https://github.com/squidfunk/mkdocs-material.git The theme will reside in the folder mkdocs-material/material. When cloning from git, you must install all required dependencies yourself: pip install -r mkdocs-material/requirements.txt All the contents are in the docs folder and the mkdocs config in mkdocs.yml relative to the project root directory. MkDocs includes a live preview server, so you can preview your changes as you modify the documentation. The server will automatically rebuild the site upon saving. Start it with: mkdocs serve You are now all set up and ready to contribute!","title":"Steps for local setup"},{"location":"contributing/#best-practices","text":"All pages must include a proper title and an introduction. If the document contains a technical term, it must be highlighted using *term* markdown syntax. If the document contains an acronym or initialism, it should be first introduced highlighted in its expanded form followed by the commonly-accepted abbreviation in brackets (like Free and open-source software (FOSS)). Use paragraphs to introduce a single concept and move on to a new paragraph before introducing another or expanding upon the first concept. Keep the size of those paragraphs to no more than four to five lines. If you find you're putting commas in a sentence consider splitting it into two or more sentences for improved clarity. Split the document up into as many sub-sections as makes sense. This is especially helpful for the readers who want to skip ahead for reference, as we can also use subheads as navigational anchors. \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Best practices"},{"location":"installation/","text":"Installation \u00b6 React-Auth-Kit is available as a npm package npm \u00b6 To install and save in your package.json dependencies, run: //with npm npm install --save react-auth-kit //with yarn yarn add react-auth-kit Please note that react >= 16, js-cookie = 2.2.1 and react-router-dom = 5.2.0 are peer dependencies. CDN \u00b6 You can start using React-Auth-Kit with minimal infrastructure, which is great for prototyping. Two Universal Module Definition ( UMD ) files are provided: unpkg : https://unpkg.com/react-auth-kit/dist/index.umd.js jsdelivr : https://cdn.jsdelivr.net/npm/react-auth-kit/dist/index.umd.js You can follow this CDN example to quickly get started. Using this approach in production is discouraged though - the client has to download the entire library, regardless of which components are actually used, affecting performance and bandwidth utilization. The UMD links are using the latest tag to point to the latest version of the library. This pointer is unstable , it shifts as we release new versions. You should consider pointing to a specific version, such as v1.4.6 . \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Installation"},{"location":"installation/#installation","text":"React-Auth-Kit is available as a npm package","title":"Installation"},{"location":"installation/#npm","text":"To install and save in your package.json dependencies, run: //with npm npm install --save react-auth-kit //with yarn yarn add react-auth-kit Please note that react >= 16, js-cookie = 2.2.1 and react-router-dom = 5.2.0 are peer dependencies.","title":"npm "},{"location":"installation/#cdn","text":"You can start using React-Auth-Kit with minimal infrastructure, which is great for prototyping. Two Universal Module Definition ( UMD ) files are provided: unpkg : https://unpkg.com/react-auth-kit/dist/index.umd.js jsdelivr : https://cdn.jsdelivr.net/npm/react-auth-kit/dist/index.umd.js You can follow this CDN example to quickly get started. Using this approach in production is discouraged though - the client has to download the entire library, regardless of which components are actually used, affecting performance and bandwidth utilization. The UMD links are using the latest tag to point to the latest version of the library. This pointer is unstable , it shifts as we release new versions. You should consider pointing to a specific version, such as v1.4.6 . \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"CDN"},{"location":"integration/","text":"Integration \u00b6 React Auth Kit uses a Context Provider to maintain it's internal state in the application. So to use auth kit, you must have to add the AuthProvider on the very top level of your application. Without the provider the application will fail to work and will throw errors. AuthProvider \u00b6 AuthProvider is the top level context provider for React Auth Kit. By passing various props in the AuthProvider, you can configure the behaviour of React Auth Kit. Import \u00b6 import { AuthProvider } from 'react-auth-kit' Example \u00b6 Integrate AuthProvider before Routes. The best place is app.js . //app.js import React from 'react' ; import { AuthProvider } from 'react-auth-kit' import RouteComponent from './routes' ; const App = () => ( < AuthProvider authType = { 'cookie' } authName = { '_auth' } cookieDomain = { window . location . hostname } cookieSecure = { window . location . protocol === \"https:\" } > < RouteComponent /> < /AuthProvider> ); export default App ; Warning AuthProvider should wrap the BrowserRouter or HashRouter , otherwise PrivateRoute will not work and throw an error. Warning If you are using the Refresh Token feature, then you must have to add the refresh prop with proper value, otherwise refresh token will throw a not implemented error. If you are not using the Refresh Token feature, then don't add it Props \u00b6 Name Type Default Description children node The content of the component authType 'localstorage' | 'cookie' 'cookie' The type of the auth storage. In localstorage, the tokens store in localStorage. In cookie, the tokens store in cookies. authName string '_auth' The prefix for the name of the storage, which stores the auth token. Applicable for both cookies and localStorage . refresh createRefreshParamInterface ( optional ) If you are using refresh token, then add this prop. The value of the props must be the return value of createRefresh ( See Here . If you are not using refresh token, then leave the prop) cookieDomain string ( optional ) <current hostname> The Domain name for cookie. \u26a0 If authType is cookie , then you must put a value. More Info about Cookie Domain cookieSecure boolean ( optional ) <current protocol> The cookie secure flag. \u26a0 If authType is cookie , then you must put a value. More Info about Cookie Security \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Integrate in your project"},{"location":"integration/#integration","text":"React Auth Kit uses a Context Provider to maintain it's internal state in the application. So to use auth kit, you must have to add the AuthProvider on the very top level of your application. Without the provider the application will fail to work and will throw errors.","title":"Integration"},{"location":"integration/#authprovider","text":"AuthProvider is the top level context provider for React Auth Kit. By passing various props in the AuthProvider, you can configure the behaviour of React Auth Kit.","title":"AuthProvider"},{"location":"integration/#import","text":"import { AuthProvider } from 'react-auth-kit'","title":"Import"},{"location":"integration/#example","text":"Integrate AuthProvider before Routes. The best place is app.js . //app.js import React from 'react' ; import { AuthProvider } from 'react-auth-kit' import RouteComponent from './routes' ; const App = () => ( < AuthProvider authType = { 'cookie' } authName = { '_auth' } cookieDomain = { window . location . hostname } cookieSecure = { window . location . protocol === \"https:\" } > < RouteComponent /> < /AuthProvider> ); export default App ; Warning AuthProvider should wrap the BrowserRouter or HashRouter , otherwise PrivateRoute will not work and throw an error. Warning If you are using the Refresh Token feature, then you must have to add the refresh prop with proper value, otherwise refresh token will throw a not implemented error. If you are not using the Refresh Token feature, then don't add it","title":"Example"},{"location":"integration/#props","text":"Name Type Default Description children node The content of the component authType 'localstorage' | 'cookie' 'cookie' The type of the auth storage. In localstorage, the tokens store in localStorage. In cookie, the tokens store in cookies. authName string '_auth' The prefix for the name of the storage, which stores the auth token. Applicable for both cookies and localStorage . refresh createRefreshParamInterface ( optional ) If you are using refresh token, then add this prop. The value of the props must be the return value of createRefresh ( See Here . If you are not using refresh token, then leave the prop) cookieDomain string ( optional ) <current hostname> The Domain name for cookie. \u26a0 If authType is cookie , then you must put a value. More Info about Cookie Domain cookieSecure boolean ( optional ) <current protocol> The cookie secure flag. \u26a0 If authType is cookie , then you must put a value. More Info about Cookie Security \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Props"},{"location":"privateroute/","text":"# Private Route Implement Private Route on your React App React Auth Kit has a PrivateRoute functionality Based on React Router Import \u00b6 import { PrivateRoute } from 'react-auth-kit' Implementation \u00b6 Add PrivateRoute in your Routes Files inside BrowserRouter or HashRouter Demo \u00b6 <BrowserRouter> <PrivateRoute component={privateComponent} path={'/privateRoute'} loginPath={'/loginPath'} exact/> </BrowserRouter> Full Code import React from \"react\" import {BrowserRouter, Route} from \"react-router-dom\" import { PrivateRoute } from 'react-auth-kit' const Routes = () => { return ( <BrowserRouter> <Route component={LoginComponent} path={'/login'} exact/> <PrivateRoute component={privateComponent} path={'/privateRoute'} loginPath={'/loginPath'} exact/> </BrowserRouter> ) } Props \u00b6 As PrivateRoute is a derived version of Route from React-Router , that's why the props are same as Route props. Check this link . Added Prop : loginPath ( Require ): The fallback path, if the user is unauthorized. \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Private Route"},{"location":"privateroute/#import","text":"import { PrivateRoute } from 'react-auth-kit'","title":"Import"},{"location":"privateroute/#implementation","text":"Add PrivateRoute in your Routes Files inside BrowserRouter or HashRouter","title":"Implementation"},{"location":"privateroute/#demo","text":"<BrowserRouter> <PrivateRoute component={privateComponent} path={'/privateRoute'} loginPath={'/loginPath'} exact/> </BrowserRouter> Full Code import React from \"react\" import {BrowserRouter, Route} from \"react-router-dom\" import { PrivateRoute } from 'react-auth-kit' const Routes = () => { return ( <BrowserRouter> <Route component={LoginComponent} path={'/login'} exact/> <PrivateRoute component={privateComponent} path={'/privateRoute'} loginPath={'/loginPath'} exact/> </BrowserRouter> ) }","title":"Demo"},{"location":"privateroute/#props","text":"As PrivateRoute is a derived version of Route from React-Router , that's why the props are same as Route props. Check this link . Added Prop : loginPath ( Require ): The fallback path, if the user is unauthorized. \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Props"},{"location":"refreshtoken/","text":"Refresh Tokens \u00b6 Often JWT comes with a new challenge. You have to refresh the JWT token periodically using a token, named Refresh token. A refresh token is a special kind of token used to obtain a renewed access token. You can request new access tokens until the refresh token is on the DenyList. Applications must store refresh tokens securely because they essentially allow a user to remain authenticated forever. React Auth Kit implements an easy approach to integrate the refresh token. You can either use the refresh token in your application or you can leave it. API Builder \u00b6 To build the refresh token API, you have to use createRefresh function. It is an identity function. It is mainly used for typechecking and mobility. createRefresh \u00b6 createRefresh ( options ) => refreshApi Generate a refreshApi based on the options received Arguments \u00b6 options (object): Takes a refresh object. It has 2 parameters refreshApiCallback (function): This is an API function. Inside this function, you have to add a network request API. See the details interval (number): The time interval in minutes, by which the refreshApiCallback is called and the state is updated Returns \u00b6 A complete object of refresh token API. Add this object in the AuthProvider as a prop to implement the feature. import { createRefresh } from 'react-auth-kit' const refreshApi = createRefresh ({ interval : 10 , // Refreshs the token in every 10 minutes refreshApiCallback : param => { // API container function return { isSuccess : true , } } }) export default refreshApi refreshApiCallback \u00b6 The container for refresh API Arguments \u00b6 The function has only one argument, which is the object of the latest state. The object contains: authToken (string): The Auth token authTokenExpireAt (Date) : Expiring time of the Auth token refreshToken (string): The Refresh token refreshTokenExpiresAt (Date): Expiring time of the refresh token authUserState (object): The current User state Returns \u00b6 In side the function you have to return an object of new auth state fetched by the API. The return object must contain: isSuccess (boolean): If the network request is successful, then make it true , otherwise make it false. If the value of this variable is false then the state will not changed, and it'll wait for the next time newAuthToken (string): The value of this variable will be the new auth token. So pass the new auth token here. newAuthTokenExpireIn (number)(optional): New time limit in minutes, after which the auth token will expire. If you leave it, the old time limit will not be changed. So if you want to add more 10 minutes, then pass 10 here. newRefreshToken (string)(optional): Pass the new refresh token here, if you want to refresh the refresh token itself. newRefreshTokenExpiresIn (number)(optional): New time limit in minutes, after which the refresh token will expire. Works same as newAuthTokenExpireIn newAuthUserState (object)(optional): Pass the new user state. If your API updates the user state, then use this, else leave it. refreshApiCallback Example \u00b6 { refreshApiCallback : ( { // arguments authToken , authTokenExpireAt , refreshToken , refreshTokenExpiresAt , authUserState }) => { axios . post ( '/api/refresh' , { refreshToken : refreshToken , oldAuthToken : authToken } ). then (({ data })=>{ return { // As the request is successful, we are passing new tokens. isSuccess : true , // For successful network request isSuccess is true newAuthToken : data . newAuthToken , newAuthTokenExpireIn : data . newAuthTokenExpireIn // You can also add new refresh token ad new user state } }). catch (( e )=>{ console . error ( e ) return { // As the request is unsuccessful, we are just passing the isSuccess. isSuccess : false // For unsuccessful network request isSuccess is false } }) } } API Builder Example \u00b6 This is the overall example of how to use createRefresh . The example uses axios to make network request. import axios from 'axios' import { useAuthHeader , createRefresh } from 'react-auth-kit' const refreshApi = createRefresh ({ interval : 10 , // Refreshs the token in every 10 minutes refreshApiCallback : ( { authToken , authTokenExpireAt , refreshToken , refreshTokenExpiresAt , authUserState }) => { axios . post ( '/api/refresh' , { refreshToken : refreshToken , oldAuthToken : authToken } ). then (({ data })=>{ return { isSuccess : true , // For successful network request isSuccess is true newAuthToken : data . newAuthToken , newAuthTokenExpireIn : data . newAuthTokenExpireIn // You can also add new refresh token ad new user state } }). catch (( e )=>{ console . error ( e ) return { isSuccess : false // For unsuccessful network request isSuccess is false } }) } }) export default refreshApi Integration in Auth Provider. \u00b6 To add the refresh token feature, simply add the return value of createRefresh function in the AuthProvider as a prop. import { AuthProvider } from 'react-auth-kit' import refreshApi from \"./refreshApi\" ; function App () { return ( < AuthProvider authName = { \"_auth\" } authType = { \"cookie\" } refresh = { refreshApi } > < Routes /> < /AuthProvider> ); } Only use the return from createRefresh as the prop value Using values other than the return of createRefresh will cause the application to break. So only use the return of createRefresh as the prop value. \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Refresh Token"},{"location":"refreshtoken/#refresh-tokens","text":"Often JWT comes with a new challenge. You have to refresh the JWT token periodically using a token, named Refresh token. A refresh token is a special kind of token used to obtain a renewed access token. You can request new access tokens until the refresh token is on the DenyList. Applications must store refresh tokens securely because they essentially allow a user to remain authenticated forever. React Auth Kit implements an easy approach to integrate the refresh token. You can either use the refresh token in your application or you can leave it.","title":"Refresh Tokens"},{"location":"refreshtoken/#api-builder","text":"To build the refresh token API, you have to use createRefresh function. It is an identity function. It is mainly used for typechecking and mobility.","title":"API Builder"},{"location":"refreshtoken/#createrefresh","text":"createRefresh ( options ) => refreshApi Generate a refreshApi based on the options received","title":"createRefresh"},{"location":"refreshtoken/#arguments","text":"options (object): Takes a refresh object. It has 2 parameters refreshApiCallback (function): This is an API function. Inside this function, you have to add a network request API. See the details interval (number): The time interval in minutes, by which the refreshApiCallback is called and the state is updated","title":"Arguments"},{"location":"refreshtoken/#returns","text":"A complete object of refresh token API. Add this object in the AuthProvider as a prop to implement the feature. import { createRefresh } from 'react-auth-kit' const refreshApi = createRefresh ({ interval : 10 , // Refreshs the token in every 10 minutes refreshApiCallback : param => { // API container function return { isSuccess : true , } } }) export default refreshApi","title":"Returns"},{"location":"refreshtoken/#refreshapicallback","text":"The container for refresh API","title":"refreshApiCallback"},{"location":"refreshtoken/#arguments_1","text":"The function has only one argument, which is the object of the latest state. The object contains: authToken (string): The Auth token authTokenExpireAt (Date) : Expiring time of the Auth token refreshToken (string): The Refresh token refreshTokenExpiresAt (Date): Expiring time of the refresh token authUserState (object): The current User state","title":"Arguments"},{"location":"refreshtoken/#returns_1","text":"In side the function you have to return an object of new auth state fetched by the API. The return object must contain: isSuccess (boolean): If the network request is successful, then make it true , otherwise make it false. If the value of this variable is false then the state will not changed, and it'll wait for the next time newAuthToken (string): The value of this variable will be the new auth token. So pass the new auth token here. newAuthTokenExpireIn (number)(optional): New time limit in minutes, after which the auth token will expire. If you leave it, the old time limit will not be changed. So if you want to add more 10 minutes, then pass 10 here. newRefreshToken (string)(optional): Pass the new refresh token here, if you want to refresh the refresh token itself. newRefreshTokenExpiresIn (number)(optional): New time limit in minutes, after which the refresh token will expire. Works same as newAuthTokenExpireIn newAuthUserState (object)(optional): Pass the new user state. If your API updates the user state, then use this, else leave it.","title":"Returns"},{"location":"refreshtoken/#refreshapicallback-example","text":"{ refreshApiCallback : ( { // arguments authToken , authTokenExpireAt , refreshToken , refreshTokenExpiresAt , authUserState }) => { axios . post ( '/api/refresh' , { refreshToken : refreshToken , oldAuthToken : authToken } ). then (({ data })=>{ return { // As the request is successful, we are passing new tokens. isSuccess : true , // For successful network request isSuccess is true newAuthToken : data . newAuthToken , newAuthTokenExpireIn : data . newAuthTokenExpireIn // You can also add new refresh token ad new user state } }). catch (( e )=>{ console . error ( e ) return { // As the request is unsuccessful, we are just passing the isSuccess. isSuccess : false // For unsuccessful network request isSuccess is false } }) } }","title":"refreshApiCallback Example"},{"location":"refreshtoken/#api-builder-example","text":"This is the overall example of how to use createRefresh . The example uses axios to make network request. import axios from 'axios' import { useAuthHeader , createRefresh } from 'react-auth-kit' const refreshApi = createRefresh ({ interval : 10 , // Refreshs the token in every 10 minutes refreshApiCallback : ( { authToken , authTokenExpireAt , refreshToken , refreshTokenExpiresAt , authUserState }) => { axios . post ( '/api/refresh' , { refreshToken : refreshToken , oldAuthToken : authToken } ). then (({ data })=>{ return { isSuccess : true , // For successful network request isSuccess is true newAuthToken : data . newAuthToken , newAuthTokenExpireIn : data . newAuthTokenExpireIn // You can also add new refresh token ad new user state } }). catch (( e )=>{ console . error ( e ) return { isSuccess : false // For unsuccessful network request isSuccess is false } }) } }) export default refreshApi","title":"API Builder Example"},{"location":"refreshtoken/#integration-in-auth-provider","text":"To add the refresh token feature, simply add the return value of createRefresh function in the AuthProvider as a prop. import { AuthProvider } from 'react-auth-kit' import refreshApi from \"./refreshApi\" ; function App () { return ( < AuthProvider authName = { \"_auth\" } authType = { \"cookie\" } refresh = { refreshApi } > < Routes /> < /AuthProvider> ); } Only use the return from createRefresh as the prop value Using values other than the return of createRefresh will cause the application to break. So only use the return of createRefresh as the prop value. \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Integration in Auth Provider."},{"location":"signin/","text":"Sign In \u00b6 Implement Sign In on your React App React Auth Kit has easy to implement Sign In procedures. signIn functionality available in both hook and Higher Order Component For Functional Components, you can use useSignIn function inside any components For class based components, you can wrap the component inside withSignIn function Usage \u00b6 Functional Component \u00b6 signIn in React Functional Components(FC) by adding the useSignIn hook inside it. Import \u00b6 import { useSignIn } from 'react-auth-kit' Demo \u00b6 import { useSignIn } from 'react-auth-kit' const SignInComponent = () => { const signIn = useSignIn() ... const onSubmit = (e) => { ... if(signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState, refreshToken: res.data.refreshToken, // Only if you are using refreshToken feature refreshTokenExpireIn: res.data.refreshTokenExpireIn})){ // Only if you are using refreshToken feature // Redirect or do-something }else { //Throw error } } return ( ... ) } Full Example Code import React from \"react\" import axios from 'axios' import { useSignIn } from 'react-auth-kit' const SignInComponent = () => { const signIn = useSignIn() const [formData, setFormData] = React.useState({email: '', password: ''}) const onSubmit = (e) => { e.preventDefault() axios.post('/api/login', formData) .then((res)=>{ if(res.status === 200){ if(signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState, refreshToken: res.data.refreshToken, // Only if you are using refreshToken feature refreshTokenExpireIn: res.data.refreshTokenExpireIn})){ // Only if you are using refreshToken feature // Redirect or do-something }else { //Throw error } } }) } return ( <form onSubmit={onSubmit}> <input type={\"email\"} onChange={(e)=>setFormData({...formData, email: e.target.value})}/> <input type={\"password\"} onChange={(e)=>setFormData({...formData, password: e.target.value})}/> <button>Submit</button> </form> ) } API \u00b6 useSignIn () : ( signInConfig ) => boolean For details about signInConfig , please go to the signInConfig section Class Based Component \u00b6 Sign In using Higher Order Component using withSignIn Import \u00b6 import { withSignIn } from 'react-auth-kit' Demo \u00b6 import { withSignIn } from 'react-auth-kit' class signInComponent extends React.Component { const onSubmit = (e) => { ... if(this.props.signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } render(){ ... } } export default withSignIn(signInComponent) Full Example Code import React from 'react' import axios from 'axios' import { withSignIn } from 'react-auth-kit' class signInComponent extends React.Component { state={email: '', password: ''} onSubmit = (e) => { e.preventDefault() axios.post('/api/login', this.state) .then((res)=>{ if(res.status === 200){ if(this.props.signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } }) } render(){ return ( <form onSubmit={onSubmit}> <input type={\"email\"} onChange={(e)=>this.setState({...this.state, email: e.target.value})}/> <input type={\"password\"} onChange={(e)=>this.setState({...this.state, password: e.target.value})}/> <button>Submit</button> </form> ) } } export default withSignIn(signInComponent) API \u00b6 withSignIn ( Component : React.ComponentType ) : React . FC Returns React . FC < P > (Functional Component with signIn(signInConfig) prop) For details about signInConfig , please go to the signInConfig section SignInConfig \u00b6 { token : string tokenType : string | 'Bearer' expiresIn : number authState : object refreshToken ?: string refreshTokenExpireIn ?: number } Explanation of SignInConfig \u00b6 Name Type Description token string The Authentication token (JWT) to be stored from server tokenType string | 'Bearer' The type of authentication token. expiresIn number The time for which the auth token will last, in minutes authState object ( optional ) State of the authorized user. Eg: { name : Jhon , email : jhon @ auth . com } refreshToken string ( optional ) Refresh Token sent by the server. Use only, if you are using refresh token feature. For more info Go to the Refresh Token page refreshTokenExpireIn number ( optional ) The time for which the refresh token will last, in minutes , Use only, if you are using refresh token feature. For more info Go to the Refresh Token page \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Sign In"},{"location":"signin/#sign-in","text":"Implement Sign In on your React App React Auth Kit has easy to implement Sign In procedures. signIn functionality available in both hook and Higher Order Component For Functional Components, you can use useSignIn function inside any components For class based components, you can wrap the component inside withSignIn function","title":"Sign In"},{"location":"signin/#usage","text":"","title":"Usage"},{"location":"signin/#functional-component","text":"signIn in React Functional Components(FC) by adding the useSignIn hook inside it.","title":"Functional Component"},{"location":"signin/#import","text":"import { useSignIn } from 'react-auth-kit'","title":"Import"},{"location":"signin/#demo","text":"import { useSignIn } from 'react-auth-kit' const SignInComponent = () => { const signIn = useSignIn() ... const onSubmit = (e) => { ... if(signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState, refreshToken: res.data.refreshToken, // Only if you are using refreshToken feature refreshTokenExpireIn: res.data.refreshTokenExpireIn})){ // Only if you are using refreshToken feature // Redirect or do-something }else { //Throw error } } return ( ... ) } Full Example Code import React from \"react\" import axios from 'axios' import { useSignIn } from 'react-auth-kit' const SignInComponent = () => { const signIn = useSignIn() const [formData, setFormData] = React.useState({email: '', password: ''}) const onSubmit = (e) => { e.preventDefault() axios.post('/api/login', formData) .then((res)=>{ if(res.status === 200){ if(signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState, refreshToken: res.data.refreshToken, // Only if you are using refreshToken feature refreshTokenExpireIn: res.data.refreshTokenExpireIn})){ // Only if you are using refreshToken feature // Redirect or do-something }else { //Throw error } } }) } return ( <form onSubmit={onSubmit}> <input type={\"email\"} onChange={(e)=>setFormData({...formData, email: e.target.value})}/> <input type={\"password\"} onChange={(e)=>setFormData({...formData, password: e.target.value})}/> <button>Submit</button> </form> ) }","title":"Demo"},{"location":"signin/#api","text":"useSignIn () : ( signInConfig ) => boolean For details about signInConfig , please go to the signInConfig section","title":"API"},{"location":"signin/#class-based-component","text":"Sign In using Higher Order Component using withSignIn","title":"Class Based Component"},{"location":"signin/#import_1","text":"import { withSignIn } from 'react-auth-kit'","title":"Import"},{"location":"signin/#demo_1","text":"import { withSignIn } from 'react-auth-kit' class signInComponent extends React.Component { const onSubmit = (e) => { ... if(this.props.signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } render(){ ... } } export default withSignIn(signInComponent) Full Example Code import React from 'react' import axios from 'axios' import { withSignIn } from 'react-auth-kit' class signInComponent extends React.Component { state={email: '', password: ''} onSubmit = (e) => { e.preventDefault() axios.post('/api/login', this.state) .then((res)=>{ if(res.status === 200){ if(this.props.signIn({token: res.data.token, expiresIn:res.data.expiresIn, tokenType: \"Bearer\", authState: res.data.authUserState})){ // Redirect or do-something }else { //Throw error } } }) } render(){ return ( <form onSubmit={onSubmit}> <input type={\"email\"} onChange={(e)=>this.setState({...this.state, email: e.target.value})}/> <input type={\"password\"} onChange={(e)=>this.setState({...this.state, password: e.target.value})}/> <button>Submit</button> </form> ) } } export default withSignIn(signInComponent)","title":"Demo"},{"location":"signin/#api_1","text":"withSignIn ( Component : React.ComponentType ) : React . FC Returns React . FC < P > (Functional Component with signIn(signInConfig) prop) For details about signInConfig , please go to the signInConfig section","title":"API"},{"location":"signin/#signinconfig","text":"{ token : string tokenType : string | 'Bearer' expiresIn : number authState : object refreshToken ?: string refreshTokenExpireIn ?: number }","title":"SignInConfig"},{"location":"signin/#explanation-of-signinconfig","text":"Name Type Description token string The Authentication token (JWT) to be stored from server tokenType string | 'Bearer' The type of authentication token. expiresIn number The time for which the auth token will last, in minutes authState object ( optional ) State of the authorized user. Eg: { name : Jhon , email : jhon @ auth . com } refreshToken string ( optional ) Refresh Token sent by the server. Use only, if you are using refresh token feature. For more info Go to the Refresh Token page refreshTokenExpireIn number ( optional ) The time for which the refresh token will last, in minutes , Use only, if you are using refresh token feature. For more info Go to the Refresh Token page \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Explanation of SignInConfig"},{"location":"signout/","text":"Sign Out \u00b6 Implement Sign Out on your React App React Auth Kit has easy to implement Sign In procedures. It supports both Hooks and Higher Order Component for both Functional Components and Class-based Components Sign Out using Hooks \u00b6 Sign In using Hooks need useSignOut hook Add the useSignOut hook in the component then call the signOut inside the component import { useSignOut } from 'react-auth-kit' Demo \u00b6 import React from \"react\" import { useSignOut } from 'react-auth-kit' const SignInComponent = () => { const signOut = useSignOut() return ( <button onClick={() => signOut()}>Sign Out</button> ) } Sign Out using Higher Order Component \u00b6 Sign In using Higher Order Component using withSignOut . Add the withSignOut HOC and call the this.props.signOut function inside the component import { withSignOut } from 'react-auth-kit' Demo \u00b6 import React from \"react\" import { withSignOut } from 'react-auth-kit' class signOutComponent extends React.Component { render(){ return ( <button onClick={() => this.props.signOut()}>Sign Out</button> ) } } export default withSignIn(signInComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Sign Out"},{"location":"signout/#sign-out","text":"Implement Sign Out on your React App React Auth Kit has easy to implement Sign In procedures. It supports both Hooks and Higher Order Component for both Functional Components and Class-based Components","title":"Sign Out"},{"location":"signout/#sign-out-using-hooks","text":"Sign In using Hooks need useSignOut hook Add the useSignOut hook in the component then call the signOut inside the component import { useSignOut } from 'react-auth-kit'","title":"Sign Out using Hooks"},{"location":"signout/#demo","text":"import React from \"react\" import { useSignOut } from 'react-auth-kit' const SignInComponent = () => { const signOut = useSignOut() return ( <button onClick={() => signOut()}>Sign Out</button> ) }","title":"Demo"},{"location":"signout/#sign-out-using-higher-order-component","text":"Sign In using Higher Order Component using withSignOut . Add the withSignOut HOC and call the this.props.signOut function inside the component import { withSignOut } from 'react-auth-kit'","title":"Sign Out using Higher Order Component"},{"location":"signout/#demo_1","text":"import React from \"react\" import { withSignOut } from 'react-auth-kit' class signOutComponent extends React.Component { render(){ return ( <button onClick={() => this.props.signOut()}>Sign Out</button> ) } } export default withSignIn(signInComponent) \u2014 \ud83d\udd11 \u2014 React Auth Kit is Apache 2.0 License code","title":"Demo"}]}